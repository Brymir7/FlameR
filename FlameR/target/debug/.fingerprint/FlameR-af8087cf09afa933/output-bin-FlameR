{"message":"the name `TensorHandle` is defined multiple times","code":{"code":"E0428","explanation":"A type or module has been defined more than once.\n\nErroneous code example:\n\n```compile_fail,E0428\nstruct Bar;\nstruct Bar; // error: duplicate definition of value `Bar`\n```\n\nPlease verify you didn't misspell the type/module's name or remove/rename the\nduplicated one. Example:\n\n```\nstruct Bar;\nstruct Bar2; // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\tensor.rs","byte_start":1952,"byte_end":1979,"line_start":85,"line_end":85,"column_start":1,"column_end":28,"is_primary":true,"text":[{"text":"struct TensorHandle(usize);","highlight_start":1,"highlight_end":28}],"label":"`TensorHandle` redefined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\tensor.rs","byte_start":48,"byte_end":75,"line_start":3,"line_end":3,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"struct TensorHandle(usize);","highlight_start":1,"highlight_end":28}],"label":"previous definition of the type `TensorHandle` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`TensorHandle` must be defined only once in the type namespace of this module","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0428]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the name `TensorHandle` is defined multiple times\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\tensor.rs:85:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mstruct TensorHandle(usize);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mprevious definition of the type `TensorHandle` here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mstruct TensorHandle(usize);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`TensorHandle` redefined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `TensorHandle` must be defined only once in the type namespace of this module\u001b[0m\n\n"}
{"message":"enum `Device` is private","code":{"code":"E0603","explanation":"A private item was used outside its scope.\n\nErroneous code example:\n\n```compile_fail,E0603\nmod foo {\n    const PRIVATE: u32 = 0x_a_bad_1dea_u32; // This const is private, so we\n                                            // can't use it outside of the\n                                            // `foo` module.\n}\n\nprintln!(\"const value: {}\", foo::PRIVATE); // error: constant `PRIVATE`\n                                                  //        is private\n```\n\nIn order to fix this error, you need to make the item public by using the `pub`\nkeyword. Example:\n\n```\nmod foo {\n    pub const PRIVATE: u32 = 0x_a_bad_1dea_u32; // We set it public by using the\n                                                // `pub` keyword.\n}\n\nprintln!(\"const value: {}\", foo::PRIVATE); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\tensor.rs","byte_start":24,"byte_end":30,"line_start":1,"line_end":1,"column_start":25,"column_end":31,"is_primary":true,"text":[{"text":"use crate::lazybuffer::{Device, LazyBuffer};","highlight_start":25,"highlight_end":31}],"label":"private enum","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the enum `Device` is defined here","code":null,"level":"note","spans":[{"file_name":"src\\lazybuffer.rs","byte_start":75,"byte_end":86,"line_start":5,"line_end":5,"column_start":1,"column_end":12,"is_primary":true,"text":[{"text":"enum Device {","highlight_start":1,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0603]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: enum `Device` is private\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\tensor.rs:1:25\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::lazybuffer::{Device, LazyBuffer};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mprivate enum\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the enum `Device` is defined here\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\lazybuffer.rs:5:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0menum Device {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `std::arch::x86_64`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\lazybuffer.rs","byte_start":4,"byte_end":21,"line_start":1,"line_end":1,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"use std::arch::x86_64;","highlight_start":5,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\lazybuffer.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23,"is_primary":true,"text":[{"text":"use std::arch::x86_64;","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `std::arch::x86_64`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\lazybuffer.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::arch::x86_64;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `Tensor`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\lazybuffer.rs","byte_start":46,"byte_end":52,"line_start":3,"line_end":3,"column_start":21,"column_end":27,"is_primary":true,"text":[{"text":"use crate::tensor::{Tensor, TensorOperation};","highlight_start":21,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src\\lazybuffer.rs","byte_start":46,"byte_end":54,"line_start":3,"line_end":3,"column_start":21,"column_end":29,"is_primary":true,"text":[{"text":"use crate::tensor::{Tensor, TensorOperation};","highlight_start":21,"highlight_end":29}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `Tensor`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\lazybuffer.rs:3:21\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::tensor::{Tensor, TensorOperation};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^\u001b[0m\n\n"}
{"message":"recursive types `LazyBuffer`, `TensorOperation` and `Tensor` have infinite size","code":{"code":"E0072","explanation":"A recursive type has infinite size because it doesn't have an indirection.\n\nErroneous code example:\n\n```compile_fail,E0072\nstruct ListNode {\n    head: u8,\n    tail: Option<ListNode>, // error: no indirection here so impossible to\n                            //        compute the type's size\n}\n```\n\nWhen defining a recursive struct or enum, any use of the type being defined\nfrom inside the definition must occur behind a pointer (like `Box`, `&` or\n`Rc`). This is because structs and enums must have a well-defined size, and\nwithout the pointer, the size of the type would need to be unbounded.\n\nIn the example, the type cannot have a well-defined size, because it needs to be\narbitrarily large (since we would be able to nest `ListNode`s to any depth).\nSpecifically,\n\n```plain\nsize of `ListNode` = 1 byte for `head`\n                   + 1 byte for the discriminant of the `Option`\n                   + size of `ListNode`\n```\n\nOne way to fix this is by wrapping `ListNode` in a `Box`, like so:\n\n```\nstruct ListNode {\n    head: u8,\n    tail: Option<Box<ListNode>>,\n}\n```\n\nThis works because `Box` is a pointer, so its size is well-known.\n"},"level":"error","spans":[{"file_name":"src\\lazybuffer.rs","byte_start":271,"byte_end":286,"line_start":16,"line_end":16,"column_start":16,"column_end":31,"is_primary":false,"text":[{"text":"    operation: TensorOperation,","highlight_start":16,"highlight_end":31}],"label":"recursive without indirection","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\tensor.rs","byte_start":2057,"byte_end":2063,"line_start":89,"line_end":89,"column_start":9,"column_end":15,"is_primary":false,"text":[{"text":"    Add(Tensor, Tensor),","highlight_start":9,"highlight_end":15}],"label":"recursive without indirection","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\tensor.rs","byte_start":110,"byte_end":120,"line_start":5,"line_end":5,"column_start":13,"column_end":23,"is_primary":false,"text":[{"text":"    buffer: LazyBuffer,","highlight_start":13,"highlight_end":23}],"label":"recursive without indirection","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\lazybuffer.rs","byte_start":202,"byte_end":223,"line_start":14,"line_end":14,"column_start":1,"column_end":22,"is_primary":true,"text":[{"text":"pub struct LazyBuffer {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\tensor.rs","byte_start":77,"byte_end":94,"line_start":4,"line_end":4,"column_start":1,"column_end":18,"is_primary":true,"text":[{"text":"pub struct Tensor {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\tensor.rs","byte_start":2006,"byte_end":2030,"line_start":87,"line_end":87,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"pub enum TensorOperation {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"insert some indirection (e.g., a `Box`, `Rc`, or `&`) to break the cycle","code":null,"level":"help","spans":[{"file_name":"src\\lazybuffer.rs","byte_start":271,"byte_end":271,"line_start":16,"line_end":16,"column_start":16,"column_end":16,"is_primary":true,"text":[{"text":"    operation: TensorOperation,","highlight_start":16,"highlight_end":16}],"label":null,"suggested_replacement":"Box<","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"src\\lazybuffer.rs","byte_start":286,"byte_end":286,"line_start":16,"line_end":16,"column_start":31,"column_end":31,"is_primary":true,"text":[{"text":"    operation: TensorOperation,","highlight_start":31,"highlight_end":31}],"label":null,"suggested_replacement":">","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"src\\tensor.rs","byte_start":110,"byte_end":110,"line_start":5,"line_end":5,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"    buffer: LazyBuffer,","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"Box<","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"src\\tensor.rs","byte_start":120,"byte_end":120,"line_start":5,"line_end":5,"column_start":23,"column_end":23,"is_primary":true,"text":[{"text":"    buffer: LazyBuffer,","highlight_start":23,"highlight_end":23}],"label":null,"suggested_replacement":">","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"src\\tensor.rs","byte_start":2057,"byte_end":2057,"line_start":89,"line_end":89,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"    Add(Tensor, Tensor),","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"Box<","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"src\\tensor.rs","byte_start":2063,"byte_end":2063,"line_start":89,"line_end":89,"column_start":15,"column_end":15,"is_primary":true,"text":[{"text":"    Add(Tensor, Tensor),","highlight_start":15,"highlight_end":15}],"label":null,"suggested_replacement":">","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0072]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: recursive types `LazyBuffer`, `TensorOperation` and `Tensor` have infinite size\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\lazybuffer.rs:14:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct LazyBuffer {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    data: Option<Vec<f32>>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    operation: TensorOperation,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrecursive without indirection\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0msrc\\tensor.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Tensor {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m5\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    buffer: LazyBuffer,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrecursive without indirection\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum TensorOperation {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m88\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Creation,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Add(Tensor, Tensor),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrecursive without indirection\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"aborting due to 3 previous errors; 2 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 3 previous errors; 2 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0072, E0428, E0603.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0072, E0428, E0603.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0072`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0072`.\u001b[0m\n"}
